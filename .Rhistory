cut <- cut %>% mutate(new = number+1) %>% select(-number, number = new)
teams <- bind_rows(teams, cut)
new_row <- data.frame(names = "icon-zero", height = 24, number = current_empty)
teams <- bind_rows(teams, new_row)
}
} else{teams$number <- 1:nrow(player_info)}
pred_date <- as.data.frame(pred_date)
pred_date$number = 1:nrow(pred_date)
teams <- left_join(teams, pred_date, by="number")
targets <- data.frame(plink = plinks)
sep <- targets %>% separate(col = plink, into = c("prefix", "body"), sep = 8)
sep <- sep %>% separate(col = "body", into = c("site", "body"), sep = 9)
sep <- sep %>% separate(col = "body", into = c("suffix", "body"), sep = 5)
sep <- sep %>% separate(col = "body", into = c("type", "body"), sep = 6)
targets <- targets %>% mutate(site = sep$site, type = sep$type) %>% filter(type == "Player")
targets$number = 1:nrow(targets)
new_names <- data.frame(name = player_info$name)
sep <- new_names %>% separate(col = name, into = c("A", "B", "C", "D", "E"), sep = "                ")
player_info$name <- sep$B
player_info$name <- gsub("\n","",player_info$name)
player_info$class <- sep$D
player_info$class <- gsub("\n","",player_info$class)
player_info$class <- substr(player_info$class, 6, 9)
new_pos <- data.frame(pos = player_info$pos)
sep <- new_pos %>% separate(col = pos, into = c("A", "B", "C"), sep = "/")
new_pos$pos <- sep$A
new_pos$ht <- sep$B
new_pos$wt <- sep$C
new_pos$pos <- gsub("\n                ","",new_pos$pos)
sep3 <- new_pos %>% separate(col = wt, into = c("A", "B"), sep = "            ")
player_info$ht <- sep3$ht
player_info$ht <- gsub(" ","",player_info$ht)
player_info$wt <- sep3$A
player_info$wt <- gsub(" |\n","",player_info$wt)
player_info <- player_info %>% mutate(wt = as.integer(wt))
player_info$pos <- new_pos$pos
new_rank <- data.frame(rank = player_info$rank)
sep <- new_rank %>% separate(col = rank, into = c("A", "B"), sep = "                \n                ")
new_rank$rank <- sep$B
sep <- new_rank %>% separate(col = rank, into = c("A", "B"), sep = "            ")
player_info$rank <- sep$A
player_info <- player_info %>% mutate(star = if_else(rank>0.9832, "5-Star",
if_else(rank>0.8900, "4-Star",
"3-Star")))
cb_list <- left_join(teams, targets, by="number")
loginfo(glue("Parsed/Cleaned {nrow(cb_list)} records from 247Sports link {url}"))
cb_list$pred_date <- with_tz(mdy_hm(cb_list$pred_date, tz = "America/New_York"), tzone = "UTC")
cb_list <- cb_list %>% mutate(elapsed = as.double(difftime(pred_date,
last_updated,
units = "secs")))
cb_list <- left_join(cb_list, player_info, by="number")
seqA <- seq(1,(length(predictor_names)-1), by = 2)
seqB <- seq(2,length(predictor_names), by=2)
predictor_info <- data.frame(predictor = predictor_names[seqA],
title = predictor_names[seqB],
flink = flinks$link, number = 1:nrow(flinks))
predictor_info$confidence <- as.integer(confidence)
cb_list <- left_join(cb_list, predictor_info, by="number")
View(cb_list)
tmp <- query_crystal_balls(team_url)
if(is.null(tmp) == FALSE) {
new_cbs <- rbind(new_cbs, tmp)
}
loginfo(glue("Starting 247 Crystal Ball scraping for target year {target_year}..."))
# Configurable environment variables
selected_247_prefix <- Sys.getenv("TARGET_247_PREFIX") # prefix for a team-specific 247Sports blog. Will usually be after the "https://247sports.com/college/" portion of the team site URL.
selected_247_prefix <- ifelse(is.na(selected_247_prefix) || str_length(selected_247_prefix) == 0, "byu", selected_247_prefix)
# national_url <- paste0("https://247sports.com/Season/",target_year,"-Football/TargetPredictions/")
team_url <- paste0("https://247sports.com/college/",selected_247_prefix,"/Season/",target_year,"-Football/CurrentTargetPredictions/")
tmp <- query_crystal_balls(team_url)
View(tmp)
target_year = 2023
target_year = 2023
# national_url <- paste0("https://247sports.com/Season/",target_year,"-Football/TargetPredictions/")
team_url <- paste0("https://247sports.com/college/",selected_247_prefix,"/Season/",target_year,"-Football/CurrentTargetPredictions/")
tmp <- query_crystal_balls(team_url)
if(is.null(tmp) == FALSE) {
new_cbs <- rbind(new_cbs, tmp)
}
View(new_cbs)
for (target_year in target_years) {
loginfo(glue("Starting 247 Crystal Ball scraping for target year {target_year}..."))
# Configurable environment variables
selected_247_prefix <- Sys.getenv("TARGET_247_PREFIX") # prefix for a team-specific 247Sports blog. Will usually be after the "https://247sports.com/college/" portion of the team site URL.
selected_247_prefix <- ifelse(is.na(selected_247_prefix) || str_length(selected_247_prefix) == 0, "byu", selected_247_prefix)
# national_url <- paste0("https://247sports.com/Season/",target_year,"-Football/TargetPredictions/")
team_url <- paste0("https://247sports.com/college/",selected_247_prefix,"/Season/",target_year,"-Football/CurrentTargetPredictions/")
# links <- c(national_url, team_url)
#for (item in links) {
#    tmp = query_crystal_balls(item)
#    tmp$class = target_year
#    new_cbs <- rbind(new_cbs, tmp)
#}
tmp <- query_crystal_balls(team_url)
if(is.null(tmp) == FALSE) {
new_cbs <- rbind(new_cbs, tmp)
}
loginfo(glue("Found {nrow(new_cbs)} total Crystal Balls, deduping and filtering based on criteria: school ({selected_school}), year ({target_year}), and time since last updated ({last_updated})..."))
}
target_years = c(2022,2023,2024,2025)
for (target_year in target_years) {
loginfo(glue("Starting 247 Crystal Ball scraping for target year {target_year}..."))
# Configurable environment variables
selected_247_prefix <- Sys.getenv("TARGET_247_PREFIX") # prefix for a team-specific 247Sports blog. Will usually be after the "https://247sports.com/college/" portion of the team site URL.
selected_247_prefix <- ifelse(is.na(selected_247_prefix) || str_length(selected_247_prefix) == 0, "byu", selected_247_prefix)
# national_url <- paste0("https://247sports.com/Season/",target_year,"-Football/TargetPredictions/")
team_url <- paste0("https://247sports.com/college/",selected_247_prefix,"/Season/",target_year,"-Football/CurrentTargetPredictions/")
# links <- c(national_url, team_url)
#for (item in links) {
#    tmp = query_crystal_balls(item)
#    tmp$class = target_year
#    new_cbs <- rbind(new_cbs, tmp)
#}
tmp <- query_crystal_balls(team_url)
if(is.null(tmp) == FALSE) {
new_cbs <- rbind(new_cbs, tmp)
}
loginfo(glue("Found {nrow(new_cbs)} total Crystal Balls, deduping and filtering based on criteria: school ({selected_school}), year ({target_year}), and time since last updated ({last_updated})..."))
}
new_cbs <- new_cbs %>%
group_by(predictor, name, names) %>%
slice(1) %>%
ungroup() %>%
filter(elapsed >= 0)
View(new_cbs)
new_cbs <- distinct(new_cbs,plink, .keep_all = TRUE)
new_cbs <- new_cbs %>%
group_by(predictor, name, names) %>%
slice(1) %>%
ungroup() %>%
filter(elapsed >= 0)
loginfo(glue("Found {nrow(new_cbs)} Crystal Balls that match given criteria."))
library(tidyverse)
library(odbc)
library(DBI)
snowflakeConn <- dbConnect(odbc(), dsn='SNOWFLAKE_ODBC')
snowflake_query <- str_glue("
select * from epd.optimus_core.optimus_affiliates
")
snowflake_df <- dbGetQuery(snowflakeConn, snowflake_query)
optimus_df <- read.table(pipe("pbpaste"), sep="\t", header = TRUE)
optimus_df <- readxl::read_excel('~/affiliates_dump.xlsx')
optimus_df <- readxl::read_excel('~/affilaites_dump.xlsx')
View(snowflake_df)
setwd("~/GitHub/dbt_transform/models/lever")
library(tidyverse)
lever_tables <- c('account_stages',
'account_survey_email_settings',
'account_survey_triggers',
'account_survey_type_enum',
'account_surveys',
'accounts',
'agencies',
'agency_contacts',
'agency_jobs',
'agency_sources',
'api_credential_sources',
'api_credential_tags',
'api_credentials',
'approval_status_enum',
'archive_reasons',
'contact_consent_activity_enum',
'contact_consent_event_enum',
'contact_consent_events',
'contact_consent_status_enum',
'contact_emails',
'contact_location',
'contact_name',
'contact_organization_summary',
'contact_phones',
'contact_residing_country',
'contact_web_links',
'contacts',
'data_requests',
'dates',
'distribution_channel_enum',
'eeo_responses',
'eeo_source_enum',
'email_event_enum',
'email_events',
'email_participant_enum',
'email_participants',
'email_templates',
'emails',
'external_message_entity_enum',
'external_message_participant_contacts',
'external_message_participant_enum',
'external_message_participant_id_names',
'external_message_participants',
'external_message_service_enum',
'external_messages',
'form_field_type_enum',
'form_template_field_options',
'form_template_fields',
'form_templates',
'form_type_enum',
'interview_panel_interviewers',
'interview_panel_interviews',
'interview_panels',
'job_department_teams',
'job_departments',
'job_levels',
'job_locations',
'job_work_types',
'nurture_campaign_action_enum',
'nurture_campaign_delay_enum',
'nurture_campaign_email_addresses',
'nurture_campaign_event_enum',
'nurture_campaign_events',
'nurture_campaign_status_enum',
'nurture_campaign_step_archives',
'nurture_campaign_step_delays',
'nurture_campaign_step_emails',
'nurture_campaign_step_snoozes',
'nurture_campaign_steps',
'nurture_campaigns',
'nurture_templates',
'offer_approvers',
'offer_event_enum',
'offer_events',
'offer_revision_fields',
'offer_revisions',
'offer_status_enum',
'offers',
'opportunities',
'opportunity_education',
'opportunity_eeo',
'opportunity_feedback_events',
'opportunity_form_event_enum',
'opportunity_form_events',
'opportunity_form_field_files',
'opportunity_form_field_scores',
'opportunity_form_field_values',
'opportunity_form_fields',
'opportunity_forms',
'opportunity_progress_event_enum',
'opportunity_progress_events',
'opportunity_referrals',
'opportunity_source_type_enum',
'opportunity_sources',
'opportunity_tags',
'origin_enum',
'posting_approvers',
'posting_distribution_channels',
'posting_event_enum',
'posting_events',
'posting_followers',
'posting_lists',
'posting_status_enum',
'posting_tags',
'postings',
'requisition_approvers',
'requisition_event_enum',
'requisition_events',
'requisition_fields',
'requisition_postings',
'requisition_status_enum',
'requisitions',
'sources',
'stage_milestone_enum',
'stage_pipeline_enum',
'survey_response_answers',
'survey_response_tracking',
'survey_responses',
'tags',
'users'
)
library(RJDBC)
drv <- JDBC(driverClass = 'com.simba.athena.jdbc.Driver',
classPath = '~/AthenaJDBC42_2.0.13.jar')
lever_jdbc <- dbConnect(drv,
'jdbc:awsathena://AwsRegion=us-west-2;User=AKIAV2O3UG3GGANQODLU;Password=dWloS0lnH3S3i+H/aA3zrnd/1EtufQq19zinI2ST;Workgroup=lendio;S3OutputLocation=s3//services.lever.us-west-2.production.etl/accounts/535f3e34-111e-45d0-b0fc-df92a622b959/output/')
lever_jdbc <- dbConnect(drv,
'jdbc:awsathena://AwsRegion=us-west-2;User=AKIAV2O3UG3GGANQODLU;Password=dWloS0lnH3S3i+H/aA3zrnd/1EtufQq19zinI2ST;Workgroup=lendio;S3OutputLocation=s3//services.lever.us-west-2.production.etl/accounts/535f3e34-111e-45d0-b0fc-df92a622b959/output/;')
lever_tables <- dbGetQuery(lever_jdbc,
" select table_name from information_schema.tables
where table_schema = 'lever_lendio_parquet'")
View(lever_tables)
lever_columns <- dbGetQuery(lever_jdbc,
"select *
from information_schema.columns
where table_schema = 'lever_lendio_parquet'")
data_types <- unique(lever_columns$data_type)
print(data_types)
snowflake_types <- c('string', 'timestamp',
'numeric', 'numeric(38,12', 'numeric', 'boolean', 'numeric', 'date')
data_match <- data.frame(data_types, snowflake_types)
data_type <- unique(lever_columns$data_type)
data_match <- data.frame(data_type, snowflake_types)
lever_columns <- merger(lever_columns,data_match)
lever_columns <- merge(lever_columns,data_match)
lever_columns$formatted_select <- glue('$1:{lever_columns$column_name}::{lever_columns$snowflake_type} as {lever_columns$column_name}')
library(tidyverse)
lever_columns$formatted_select <- glue('$1:{lever_columns$column_name}::{lever_columns$snowflake_type} as {lever_columns$column_name}')
library(glue)
lever_columns$formatted_select <- glue('$1:{lever_columns$column_name}::{lever_columns$snowflake_type} as {lever_columns$column_name}')
View(lever_columns)
lever_columns <- lever_columns[order(table_name,ordinal_position),]
lever_columns <- lever_columns[with(lever_columns,order(table_name,ordinal_position)),]
test <- lever_columns %>%
group_by (table_name) %>%
summarise(column = toString(formatted_select)) %>%
ungroup
View(test)
lever_columns$formatted_select <- glue('\n $1:{lever_columns$column_name}::{lever_columns$snowflake_type} as {lever_columns$column_name}')
lever_columns <- lever_columns[with(lever_columns,order(table_name,ordinal_position)),]
df <- lever_columns %>%
group_by (table_name) %>%
summarise(column = toString(formatted_select)) %>%
ungroup
View(df)
print(df)
print(df$column)
lever_columns$formatted_select <- glue('$1:{lever_columns$column_name}::{lever_columns$snowflake_type} as {lever_columns$column_name}\n')
lever_columns <- lever_columns[with(lever_columns,order(table_name,ordinal_position)),]
df <- lever_columns %>%
group_by (table_name) %>%
summarise(column = toString(formatted_select)) %>%
ungroup
print(df$column)
print(df$column[1])
df <- lever_columns %>%
group_by (table_name) %>%
mutate(column = paste0(formatted_select, collapse = ",\n"))
#summarise(column = toString(formatted_select)) %>%
ungroup
df <- lever_columns %>%
group_by (table_name) %>%
mutate(column = paste0(formatted_select, collapse = ",\n")) %>%
#summarise(column = toString(formatted_select)) %>%
ungroup
View(df)
print(df$column[1])
test <- df$column[1]
test
cat(test)
df <- lever_columns %>%
group_by (table_name) %>%
mutate(column = paste0(formatted_select, collapse = ",\n"))
View(df)
df <- lever_columns %>%
group_by (table_name) %>%
mutate(column = paste0(formatted_select, collapse = ",\n")) %>%
select(table_name, column)
View(df)
df <- lever_columns %>%
group_by (table_name) %>%
mutate(column = paste0(formatted_select, collapse = ",\n")) %>%
select(table_name, column) %>% unique()
View(df)
df$s3_path <- glue('s3://services.lever.us-west-2.production.etl/accounts/535f3e34-111e-45d0-b0fc-df92a622b959/active/{df$table_name}')
View(df)
test <- glue("asdkfasdfasdf[[data_match$data_type]]", .open = "[[", .close = "]]")
df$s3_path <- glue('s3://services.lever.us-west-2.production.etl/accounts/535f3e34-111e-45d0-b0fc-df92a622b959/active/{df$table_name}/')
df$dbt <- glue(
"""
{{
config(
materialized='from_external_stage',
stage_url = [[df$s3_path]]
)
}}
select
[[df$column]]
from {{ external_stage() }}
""" , .open = "[[", .close = "]]")
, .open = "[[", .close = "]]")
df$dbt <- glue(
"""
{{
config(
materialized='from_external_stage',
stage_url = [[df$s3_path]]
)
}}
select
[[df$column]]
from {{ external_stage() }}
"""
, .open = "[[", .close = "]]")
df$dbt <- glue(
"""
{{
config(
materialized='from_external_stage',
stage_url = [[df$s3_path]]
)
}}
select
[[df$column]]
from {{ external_stage() }}"""
, .open = "[[", .close = "]]")
df$dbt <- glue(
"""
{{
config(
materialized='from_external_stage',
stage_url = [[df$s3_path]]
)
}}
select
[[df$column]]
from {{ external_stage() }}""" , .open = "[[", .close = "]]")
df$dbt <- glue("{{\n   config(\n    materialized='from_external_stage',\n    stage_url = [[df$s3_path]] \n)\n}}\n\nselect\n [[df$column]] \nfrom {{ external_stage() }}" , .open = "[[", .close = "]]")
View(df)
cat(df$dbt[1])
lever_columns$formatted_select <- glue('\t$1:{lever_columns$column_name}::{lever_columns$snowflake_type} as {lever_columns$column_name}\n')
lever_columns <- lever_columns[with(lever_columns,order(table_name,ordinal_position)),]
df <- lever_columns %>%
group_by (table_name) %>%
mutate(column = paste0(formatted_select, collapse = ",\n")) %>%
select(table_name, column) %>% unique()
df$s3_path <- glue('s3://services.lever.us-west-2.production.etl/accounts/535f3e34-111e-45d0-b0fc-df92a622b959/active/{df$table_name}/')
df$dbt <- glue("{{\n   config(\n    materialized='from_external_stage',\n    stage_url = [[df$s3_path]] \n)\n}}\n\nselect\n [[df$column]] \nfrom {{ external_stage() }}" , .open = "[[", .close = "]]")
cat(df$dbt[1])
lever_columns$formatted_select <- glue('     $1:{lever_columns$column_name}::{lever_columns$snowflake_type} as {lever_columns$column_name}\n')
lever_columns <- lever_columns[with(lever_columns,order(table_name,ordinal_position)),]
df <- lever_columns %>%
group_by (table_name) %>%
mutate(column = paste0(formatted_select, collapse = ",\n")) %>%
select(table_name, column) %>% unique()
df$s3_path <- glue('s3://services.lever.us-west-2.production.etl/accounts/535f3e34-111e-45d0-b0fc-df92a622b959/active/{df$table_name}/')
df$dbt <- glue("{{\n   config(\n    materialized='from_external_stage',\n    stage_url = [[df$s3_path]] \n)\n}}\n\nselect\n [[df$column]] \nfrom {{ external_stage() }}" , .open = "[[", .close = "]]")
cat(df$dbt[1])
cat(df$column[1])
lever_columns$formatted_select <- glue(' \t $1:{lever_columns$column_name}::{lever_columns$snowflake_type} as {lever_columns$column_name}\n')
lever_columns <- lever_columns[with(lever_columns,order(table_name,ordinal_position)),]
df <- lever_columns %>%
group_by (table_name) %>%
mutate(column = paste0(formatted_select, collapse = ",\n")) %>%
select(table_name, column) %>% unique()
df$s3_path <- glue('s3://services.lever.us-west-2.production.etl/accounts/535f3e34-111e-45d0-b0fc-df92a622b959/active/{df$table_name}/')
df$dbt <- glue("{{\n   config(\n    materialized='from_external_stage',\n    stage_url = [[df$s3_path]] \n)\n}}\n\nselect\n [[df$column]] \nfrom {{ external_stage() }}" , .open = "[[", .close = "]]")
cat(df$column[1])
lever_columns$formatted_select <- glue('$1:{lever_columns$column_name}::{lever_columns$snowflake_type} as {lever_columns$column_name}\n')
lever_columns <- lever_columns[with(lever_columns,order(table_name,ordinal_position)),]
df <- lever_columns %>%
group_by (table_name) %>%
mutate(column = paste0(formatted_select, collapse = ",\n")) %>%
select(table_name, column) %>% unique()
df <- lever_columns %>%
group_by (table_name) %>%
mutate(column = paste0(formatted_select, collapse = ",\n")) %>%
select(table_name, column) %>% unique()
df$s3_path <- glue('s3://services.lever.us-west-2.production.etl/accounts/535f3e34-111e-45d0-b0fc-df92a622b959/active/{df$table_name}/')
df$dbt <- glue("{{\n   config(\n    materialized='from_external_stage',\n    stage_url = [[df$s3_path]] \n)\n}}\n\nselect\n [[df$column]] \nfrom {{ external_stage() }}" , .open = "[[", .close = "]]")
cat(df$column[1])
cat(df$dbt[1])
source('~/.active-rstudio-document', echo=TRUE)
for (table in df) {
table_name <- glue('lever_{table$table_name}.sql')
cat(table$dbt,file=table_name)
}
df$file_name <-glue('lever_{df$table_name}.sql')
for (table in df) {
cat(table$dbt,file=table$file_name)
}
for (table in df) {
cat(dbt,file=file_name)
}
for (table in df) {
cat(getElement(table,"dbt"),file=getElement(table,"file_name"))
}
for (table in df) {
cat(table["dbt"],file=table["file_name"])
}
View(df)
for (i in 1:nrow(df)) {
dbt <- df[i,4]
file_name <- df[i,5]
#cat(dbt,file=file_name)
}
View(file_name)
for (i in 1:nrow(df)) {
dbt <- df[i,4]
file_name <- df[i,5]
cat(dbt,file=file_name)
}
View(lever_tables)
View(file_name)
View(dbt)
cat(dbt)
for (i in 1:nrow(df)) {
dbt <- as.vector(df[i,4])
file_name <- as.vector(df[i,5])
##cat(dbt,file=file_name)
}
View(drv)
View(lever_columns)
cat(df$dbt[1])
dbt <- df$dbt
file_name <- df$file_name
for (i in 1:nrow(df)) {
dbt <- df$dbt[i]
file_name <- df$file_name[i]
##cat(dbt,file=file_name)
}
for (i in 1:nrow(df)) {
dbt <- df$dbt[i]
file_name <- df$file_name[i]
cat(dbt,file=file_name)
}
df$s3_path <- glue("'s3://services.lever.us-west-2.production.etl/accounts/535f3e34-111e-45d0-b0fc-df92a622b959/active/{df$table_name}/'")
df$dbt <- glue("{{\n   config(\n    materialized='from_external_stage',\n    stage_url = [[df$s3_path]] \n)\n}}\n\nselect\n [[df$column]] \nfrom {{ external_stage() }}" , .open = "[[", .close = "]]")
df$file_name <-glue('lever_{df$table_name}.sql')
dbt <- df$dbt
file_name <- df$file_name
for (i in 1:nrow(df)) {
dbt <- df$dbt[i]
file_name <- df$file_name[i]
cat(dbt,file=file_name)
}
